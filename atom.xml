<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ozdimensional.github.io/</id>
    <title>OZD的摆烂窝</title>
    <updated>2022-05-06T02:40:08.441Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ozdimensional.github.io/"/>
    <link rel="self" href="https://ozdimensional.github.io/atom.xml"/>
    <subtitle>督促自己摆烂（划掉）</subtitle>
    <logo>https://ozdimensional.github.io/images/avatar.png</logo>
    <icon>https://ozdimensional.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, OZD的摆烂窝</rights>
    <entry>
        <title type="html"><![CDATA[Codeforces Round #787 (Div. 3)]]></title>
        <id>https://ozdimensional.github.io/post/codeforces-round-787-div-3/</id>
        <link href="https://ozdimensional.github.io/post/codeforces-round-787-div-3/">
        </link>
        <updated>2022-05-06T02:14:43.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://ozdimensional.github.io//post-images/1651804627880.jpg" alt="" loading="lazy"><br>
A. Food for Animals<br>
水题、暴力一遍a<br>
#include <iostream></p>
<p>using namespace std;<br>
long long a[6];</p>
<p>int main()<br>
{<br>
ios::sync_with_stdio(false);<br>
cin.tie(0);<br>
int t;<br>
cin&gt;&gt;t;<br>
while(t--)<br>
{<br>
for(int i=1;i&lt;=5;i++)<br>
cin&gt;&gt;a[i];<br>
if(a[1]&gt;=a[4])<br>
{</p>
<pre><code>        if(a[2]+a[3]&gt;=a[5])
            cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;
        else
            cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;

    }
    else
    {
        int rest=a[4]-a[1];
        {

            if(a[3]&lt;rest)
                cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;

            else
            {

                if(a[3]-rest+a[2]&gt;=a[5])
                    cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;
                else
                    cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;

            }
        }
    }
    return 0;
</code></pre>
<p>}</p>
<p>B. Make It Increasing<br>
贪心a[i-1]&gt;=a[i]的时候a[i-1]/2等于0的时候判断位置即可<br>
#include <iostream><br>
using namespace std;<br>
long long a[32];<br>
int main()<br>
{</p>
<pre><code>int t;
scanf(&quot;%d&quot;,&amp;t);
while(t--)
{

    int n;
    scanf(&quot;%d&quot;,&amp;n);
    for(int i=1;i&lt;=n;i++)
        scanf(&quot;%lld&quot;,&amp;a[i]);
    int ans=0;bool flag=true;
    if(a[n]==0&amp;&amp;n!=1)
    {
        flag=false;
    }
    else
    {

        for(int i=n-1;i;i--)
        {
            while(a[i]&gt;=a[i+1])
            {
                a[i]/=2;
                ans++;
            }
            if(a[i]==0&amp;&amp;i!=1)
            {
                flag=false;
                break;
            }
        }
    }
    if(flag)
        cout&lt;&lt;ans&lt;&lt;&quot;\n&quot;;
    else
        cout&lt;&lt;&quot;-1\n&quot;;

}
return 0;
</code></pre>
<p>}<br>
C. Detective Task<br>
像小学的时候做的思维训练题<br>
从后往前第一个1到第一个0之间的所有人都可能偷（包括1和0）<br>
#include &lt;bits/stdc++.h&gt;</p>
<p>using namespace std;<br>
int main()<br>
{<br>
int t;<br>
scanf(&quot;%d&quot;,&amp;t);<br>
while(t--)<br>
{</p>
<pre><code>    string s;
    cin&gt;&gt;s;
    int k=s.size();
    int p1=0;
    for(int i=k-1;i&gt;=0;i--)
        if(s[i]=='1')
    {
        p1=i;
        break;
    }
    int ans=0;
    for(int i=p1;i&lt;k;i++)
    {
        if(s[i]=='0')
        {
            ans++;
            break;
        }
        else
            ans++;
    }
    cout&lt;&lt;ans&lt;&lt;&quot;\n&quot;;

}
return 0;
</code></pre>
<p>}</p>
<p>D. Vertical Paths<br>
<img src="https://ozdimensional.github.io//post-images/1651804398293.png" alt="" loading="lazy"><br>
dfs嗯搜<br>
vector建一棵树<br>
在建立一个vector存输出（题面有更改本来不用统计一共有多少组输出）<br>
#include &lt;bits/stdc++.h&gt;</p>
<p>using namespace std;<br>
const int N=200004;<br>
bool flag[N];<br>
vector<int>outp[N];<br>
vector<int>tree[N];<br>
int suma[N];<br>
int ans;<br>
void dfs(int x ,int sum)<br>
{<br>
for(auto i:tree[x])<br>
{<br>
if(!flag[i])<br>
{<br>
if(outp[ans].empty())<br>
sum=0;<br>
sum++;<br>
outp[ans].push_back(i);<br>
flag[i]=true;<br>
if(tree[i].empty())<br>
{<br>
suma[ans]=sum;<br>
ans++;<br>
sum=0;<br>
}<br>
else<br>
{<br>
dfs(i,sum);<br>
}<br>
}<br>
}<br>
}<br>
int main()<br>
{</p>
<pre><code>int t;
scanf(&quot;%d&quot;,&amp;t);
while(t--)
{
    ans=0;
    int n;
    scanf(&quot;%d&quot;,&amp;n);
    int x;int start;
    for(int i=0;i&lt;=n;i++)
    {
        tree[i].clear();
        outp[i].clear();
        flag[i]=false;
    }
    for(int i=1;i&lt;=n;i++)
    {

        scanf(&quot;%d&quot;,&amp;x);
        if(x==i)
        {
            start=x;
        }
        else
            tree[x].push_back(i);

    }
    outp[0].push_back(start);
    flag[start]=true;
    dfs(start,1);
    if(n==1)
        cout&lt;&lt;&quot;1\n1\n1\n\n&quot;;
    else{
    cout&lt;&lt;ans&lt;&lt;&quot;\n&quot;;
    for(int i=0;i&lt;ans;i++)
    {
        cout&lt;&lt;suma[i]&lt;&lt;&quot;\n&quot;;
        for(auto x:outp[i])
            cout&lt;&lt;x&lt;&lt;&quot; &quot;;
        cout&lt;&lt;&quot;\n&quot;;
    }
    cout&lt;&lt;&quot;\n&quot;;}
}
return 0;
</code></pre>
<p>}<br>
E. Replace With the Previous, Minimize<br>
F. Vlad and Unfinished Business<br>
G. Sorting Pancakes<br>
待更新</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[背包]]></title>
        <id>https://ozdimensional.github.io/post/bei-bao/</id>
        <link href="https://ozdimensional.github.io/post/bei-bao/">
        </link>
        <updated>2022-05-05T03:35:01.000Z</updated>
        <content type="html"><![CDATA[<p>1、01背包<br>
#include &lt;bits/stdc++.h&gt;<br>
using namespace std;<br>
int n,m,f[1002],v[1002],w[1002];<br>
int main()<br>
{<br>
cin&gt;&gt;n&gt;&gt;m;<br>
for(int i=1;i&lt;=n;i++)<br>
{<br>
scanf(&quot;%d%d&quot;,&amp;v[i],&amp;w[i]);<br>
}<br>
for(int i=1;i&lt;=n;i++)<br>
for(int j = m ; j &gt;= v[i];j--)<br>
f[j]=max(f[j],f[j-v[i]]+w[i]);<br>
cout&lt;&lt;f[m];<br>
return 0;<br>
}<br>
2、完全背包<br>
#include &lt;bits/stdc++.h&gt;<br>
using namespace std;<br>
int n,m,f[1002],v[1002],w[1002];<br>
int main()<br>
{<br>
cin&gt;&gt;n&gt;&gt;m;<br>
for(int i=1;i&lt;=n;i++)<br>
{<br>
scanf(&quot;%d%d&quot;,&amp;v[i],&amp;w[i]);<br>
}<br>
for(int i=1;i&lt;=n;i++)<br>
for(int j = v[i]; j &lt;= m;j++)<br>
f[j]=max(f[j],f[j-v[i]]+w[i]);<br>
cout&lt;&lt;f[m];<br>
return 0;<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DP]]></title>
        <id>https://ozdimensional.github.io/post/dp/</id>
        <link href="https://ozdimensional.github.io/post/dp/">
        </link>
        <updated>2022-05-05T03:35:01.000Z</updated>
        <content type="html"><![CDATA[<p>1、01背包<br>
#include &lt;bits/stdc++.h&gt;<br>
using namespace std;<br>
int n,m,f[1002],v[1002],w[1002];<br>
int main()<br>
{<br>
cin&gt;&gt;n&gt;&gt;m;<br>
for(int i=1;i&lt;=n;i++)<br>
{<br>
scanf(&quot;%d%d&quot;,&amp;v[i],&amp;w[i]);<br>
}<br>
for(int i=1;i&lt;=n;i++)<br>
for(int j = m ; j &gt;= v[i];j--)<br>
f[j]=max(f[j],f[j-v[i]]+w[i]);<br>
cout&lt;&lt;f[m];<br>
return 0;<br>
}<br>
2、完全背包<br>
#include &lt;bits/stdc++.h&gt;<br>
using namespace std;<br>
int n,m,f[1002],v[1002],w[1002];<br>
int main()<br>
{<br>
cin&gt;&gt;n&gt;&gt;m;<br>
for(int i=1;i&lt;=n;i++)<br>
{<br>
scanf(&quot;%d%d&quot;,&amp;v[i],&amp;w[i]);<br>
}<br>
for(int i=1;i&lt;=n;i++)<br>
for(int j = v[i]; j &lt;= m;j++)<br>
f[j]=max(f[j],f[j-v[i]]+w[i]);<br>
cout&lt;&lt;f[m];<br>
return 0;<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数论]]></title>
        <id>https://ozdimensional.github.io/post/gcd/</id>
        <link href="https://ozdimensional.github.io/post/gcd/">
        </link>
        <updated>2022-05-05T03:26:56.000Z</updated>
        <content type="html"><![CDATA[<p>1、GCD<br>
int gcd（int a，int b)<br>
{<br>
if(b==0) return a;<br>
eles return gcd(b,a%b);<br>
}<br>
2、最小公倍数LCM<br>
最小公倍数=a/gcd(a,b)*b<br>
3、*裴蜀定理<br>
任意整数 gcd(a,b)|d<br>
au+bv=d<br>
存在整数解u，v；</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[最短路]]></title>
        <id>https://ozdimensional.github.io/post/zui-duan-lu/</id>
        <link href="https://ozdimensional.github.io/post/zui-duan-lu/">
        </link>
        <updated>2022-04-18T00:49:43.000Z</updated>
        <content type="html"><![CDATA[<p>1、朴素dijkstra<br>
#include &lt;bits/stdc++.h&gt;</p>
<p>using namespace std;<br>
int n,m;<br>
int g[510][510];<br>
int dist[510];<br>
bool st[510];<br>
int djkstra()<br>
{<br>
memset(dist,0x3f,sizeof(dist));<br>
dist[1]=0;</p>
<pre><code>for(int i=0;i&lt;n-1;i++)
{
    int t=-1;
    for(int j=1;j&lt;=n;j++)
    {
        if(!st[j]&amp;&amp;(t==-1||dist[t]&gt;dist[j]))
            t=j;
    }
    for(int j=1;j&lt;=n;j++)
        dist[j]=min(dist[j],dist[t]+g[t][j]);
    st[t]=true;
}
    if(dist[n]==0x3f3f3f3f) return -1;
    return dist[n];
</code></pre>
<p>}<br>
int main()<br>
{</p>
<pre><code>memset(g,0x3f,sizeof(g));
cin&gt;&gt;n&gt;&gt;m;
while(m--)
{
    int x,y,z;
    cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;
    g[x][y]=min(g[x][y],z);
}
int k=djkstra();
cout&lt;&lt;k&lt;&lt;endl;
return 0;
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSP 2022-3-20日场次]]></title>
        <id>https://ozdimensional.github.io/post/csp-2022-3-20-ri-chang-ci/</id>
        <link href="https://ozdimensional.github.io/post/csp-2022-3-20-ri-chang-ci/">
        </link>
        <updated>2022-03-21T01:28:47.000Z</updated>
        <content type="html"><![CDATA[<p>因为疫情直接取消了摆了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[KMP]]></title>
        <id>https://ozdimensional.github.io/post/kmp/</id>
        <link href="https://ozdimensional.github.io/post/kmp/">
        </link>
        <updated>2022-03-21T00:00:01.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://ozdimensional.github.io//post-images/1647825647066.jpg" alt="" loading="lazy"><br>
学习一下kmp<br>
例题：<br>
给定一个模式串 S，以及一个模板串 P，所有字符串中只包含大小写英文字母以及阿拉伯数字。<br>
模板串 P 在模式串 S 中多次作为子串出现。<br>
求出模板串 P 在模式串 S 中所有出现的位置的起始下标。</p>
<p>输入格式<br>
第一行输入整数 N，表示字符串 P 的长度。<br>
第二行输入字符串 P。<br>
第三行输入整数 M，表示字符串 S 的长度。<br>
第四行输入字符串 S。</p>
<p>输出格式<br>
共一行，输出所有出现位置的起始下标（下标从 0 开始计数），整数之间用空格隔开。</p>
<p>数据范围<br>
1≤N≤10^5<br>
1≤M≤10^6</p>
<p>#include <iostream><br>
using namespace std;<br>
const int  M=100004;<br>
int n,m;<br>
string s,p;<br>
int ne[M];<br>
int main()<br>
{<br>
cin&gt;&gt;n&gt;&gt;p&gt;&gt;m&gt;&gt;s;<br>
for (int i=1,j=0;i&lt;n;i++)<br>
{<br>
while( j  &amp;&amp;  p[i] != p[j] )<br>
j = ne[j-1];<br>
if( p[i] == p[j] )<br>
j++;<br>
ne[i] = j;<br>
}<br>
int cnt = 0;<br>
for( int i = 0 , j = 0 ; i &lt; m ; i ++ )<br>
{<br>
while( j &amp;&amp; s[i] != p[j] )<br>
j = ne[j-1];<br>
if( s[i] == p[j] )<br>
j++;<br>
if(  j == n)<br>
{<br>
j = ne[j-1];<br>
cout&lt;&lt;i-n+1&lt;&lt;&quot; &quot;;<br>
}<br>
}<br>
return 0;<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSP 2021-12]]></title>
        <id>https://ozdimensional.github.io/post/csp-2021-12/</id>
        <link href="https://ozdimensional.github.io/post/csp-2021-12/">
        </link>
        <updated>2022-03-15T07:22:18.000Z</updated>
        <content type="html"><![CDATA[<p>题目一：<br>
<img src="https://ozdimensional.github.io//post-images/1647332802761.png" alt="" loading="lazy"><br>
水题<br>
从后往前遍历，每次加(i)*(a[i]-a[i-1])就可以完成。<br>
ac 代码：<br>
#include <iostream></p>
<p>using namespace std;<br>
int a[202];<br>
int main()<br>
{<br>
int n,N;<br>
cin&gt;&gt;n&gt;&gt;N;<br>
for(int i=0;i&lt;n;i++)<br>
{<br>
scanf(&quot; %d&quot;,&amp;a[i]);<br>
}<br>
int sum=0;<br>
sum+=n*(N-a[n-1]);<br>
for(int i=n-1;i&gt;0;i--)<br>
{<br>
sum+=(i)*(a[i]-a[i-1]);<br>
}<br>
cout&lt;&lt;sum&lt;&lt;endl;<br>
return 0;<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World]]></title>
        <id>https://ozdimensional.github.io/post/bai-lan/</id>
        <link href="https://ozdimensional.github.io/post/bai-lan/">
        </link>
        <updated>2022-03-11T15:15:09.000Z</updated>
        <content type="html"><![CDATA[<p>#include <iostream></p>
<p>using namespace std;</p>
<p>int main()<br>
{<br>
cout &lt;&lt; &quot;Hello world!&quot; &lt;&lt; endl;<br>
return 0;<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[G]]></title>
        <id>https://ozdimensional.github.io/post/hello-gridea/</id>
        <link href="https://ozdimensional.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>gg</p>
]]></content>
    </entry>
</feed>